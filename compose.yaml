# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 3333:3333
    volumes:
      - .:/backend
      - /backend/node_modules
    # depends_on:
    #   ollama:
    #     condition: service_started # Ensure Ollama starts before the app

#   ollama:
#     image: ollama/ollama:latest
#     container_name: ollamaAI # Explicitly name it, or Docker Compose uses the service name
#     ports:
#       - "11434:11434" # This exposes Ollama to your host machine (e.g., for Postman)
#     volumes:
#       - ollama_data:/root/.ollama # Persist models and data
#     environment:
#       - OLLAMA_HOST=0.0.0.0:11434 # Crucial for Ollama to listen broadly for container-to-container comms
#     restart: unless-stopped
#     # If you have a GPU, ensure you add the GPU support (for M-series Macs, this is handled by Docker Desktop)
#     # deploy:
#     #   resources:
#     #     reservations:
#     #       devices:
#     #         - driver: nvidia
#     #           count: all
#     #           capabilities: [gpu]

# volumes:
#   ollama_data: # Define the named volume for Ollama data persistence

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

